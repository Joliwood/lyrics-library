type Album {
  artist: Artist
  artist_id: Int
  cover: String
  id: Int!
  release_year: Int
  songs: [Song]
  title: String!
}

input AlbumCreateInput {
  cover: String
  release_year: Int
  songIds: [Int!]!
  title: String!
}

input AlbumUpdateInput {
  # album_id: Int!
  # We provide the artist id to save one req on back to check album id / artist id
  # artist_id: Int
  cover: String
  release_year: Int
  songIds: [Int]
  title: String
}

enum ReleaseYear {
  YEAR_70
  YEAR_80
  YEAR_90
  YEAR_2000
  YEAR_2010
}

input AlbumFilterInput {
  release_year: ReleaseYear
}
type Artist {
  # email row exists in table but is visible only to the artist himself
  # email: String
  albums: [Album]
  country: String
  favorites: [ArtistLikeSong]
  id: Int!
  name: String!
  picture: String
  songs: [Song]
}

type ArtistUser {
  id: Int!
  albums: [Album]
  country: String
  email: String!
  password: String!
  name: String!
  picture: String
}

type JWT {
  expire_at: String
  token: String
}

input LoginInput {
  email: String!
  password: String!
}

input ArtistUpdateInput {
  email: String
  password: String
  picture: String
  # the favorite input will be in artist_like_song schema
  # favorites: [SongOnAlbum]
  name: String
  country: String
  # songs: [Song]
}

input ArtistFilterInput {
  name: String
}
type Song {
  artist: Artist
  artist_id: Int
  cover: String
  "Duration in second"
  duration: Int!
  id: Int!
  lyrics: String
  songOnAlbum: [SongOnAlbum]
  like: [ArtistLikeSong]
  nbLike: Int
  release_year: Int
  title: String!
  # date: String
  isLiked: Boolean
}

input SongCreateInput {
  artist_id: Int
  cover: String
  duration: Int!
  lyrics: String
  title: String!
  release_year: Int
}

enum DurationRange {
  ONE_MINUTE
  ONE_TO_THREE_MINUTES
  THREE_TO_FIVE_MINUTES
  MORE_THAN_FIVE_MINUTES
}

input SongFilterInput {
  duration_filter: DurationRange
  name: String
  liked: Boolean
}

input SongUpdateInput {
  cover: String
  duration: Int
  lyrics: String
  title: String
  release_year: Int
}

type SongOnAlbum {
  album_id: Int!
  song_id: Int!
  position: Int!
}

type ArtistLikeSong {
  artist_id: Int!
  song_id: Int!
}

type Query {
  album(id: Int!): Album
  albums(limit: Int, filter: AlbumFilterInput): [Album]
  artist(id: Int!): Artist
  artists(limit: Int, filter: ArtistFilterInput): [Artist]
  song(id: Int!): Song
  songs(limit: Int, filter: SongFilterInput): [Song]
  login(input: LoginInput!): JWT
  profile: ArtistUser
}

type Mutation {
  # -- Create -- #
  addAlbum(input: AlbumCreateInput!): Album
  addSong(input: SongCreateInput!): Song
  # -- Update -- #
  updateAlbum(albumId: Int!, albumArtistId: Int!, input: AlbumUpdateInput!): Album
  updateArtist(input: ArtistUpdateInput!): Artist
  updateSong(songId: Int!, input: SongUpdateInput!): Song
  # -- Delete -- #
  deleteAlbum(id: Int!): Boolean
  deleteArtist(id: Int!): Boolean
  deleteSongs(ids: [Int!]!): Boolean
  # -- Others -- #
  likeSong(id: Int!): Boolean
  unlikeSong(id: Int!): Boolean
}
 