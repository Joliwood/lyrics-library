import { ApolloServer } from '@apollo/server';
// eslint-disable-next-line import/extensions
import { startStandaloneServer } from '@apollo/server/standalone';
import './app/helpers/env.loader.js';

/*
Pour d√©finir un serveur API GraphQL on doit le fournir le QUOI et le COMMENT
QUOI : la description des entit√©s et de requ√™tes possibles
COMMENT : Comment on r√©cup√®re techniquement les donn√©es de chaque demande.

Le quoi, Apollo le nomme : "typeDef" (d√©finition des types) on l'appelera le sch√©ma.
  Le typeDefs utilise le langage GraphQL
Le comment, Apollo le nomme : "resolvers" (M√©thodes de r√©solution) on l'appelera resolvers.
  Les resolvers utilisent le langage JS
*/
// La r√©cup√©ration du sch√©ma
import typeDefs from './app/schemas/typeDefs.js';

// La r√©cup√©ration des resolvers pour r√©soudre le comment.
import resolvers from './app/resolvers/index.resolver.js';

// une fois les 2 parties r√©cup√©r√©s on les envoi au server Apollo
// Le server Apollo peut √™tre consid√©r√© comm: eun middleware
const server = new ApolloServer({
  typeDefs,
  resolvers,
});

const port = process.env.PGPORT ?? 3000;

// Ensuite on cr√©er et lance le server web HTTP qui pourra r√©ponsre aux requ√™tes du client.
const { url } = await startStandaloneServer(server, {
  listen: { port },
});

// eslint-disable-next-line no-console
console.log(`üöÄ  Server ready at: ${url}`);
